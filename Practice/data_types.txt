
Неизменяемые типы данных в Python

Неизменяемые типы данных (immutable types) — это типы данных, объекты которых не могут быть изменены после их создания. При попытке изменить такой объект создается новый объект. Изменение данных происходит только через создание нового экземпляра, а не через изменение состояния существующего объекта.

Примеры неизменяемых типов данных:

1. **Целые числа (int)**:
   Целые числа являются неизменяемыми объектами. Когда мы изменяем значение переменной, на самом деле создается новый объект с новым значением.
   Пример:
   ```python
   x = 5
   x = 10  # создается новый объект с значением 10
   ```

2. **Строки (str)**:
   Строки также являются неизменяемыми типами данных. При любом изменении строки создается новый объект, а не изменяется существующий.
   Пример:
   ```python
   s = "hello"
   s = s.upper()  # создается новый объект, строка "HELLO"
   ```

3. **Кортежи (tuple)**:
   Кортежи — это неизменяемые последовательности. Элементы кортежа нельзя изменять после его создания. Любые операции, изменяющие элементы кортежа, приведут к ошибке.
   Пример:
   ```python
   t = (1, 2, 3)
   # t[0] = 10 вызовет ошибку
   ```

4. **Числа с плавающей запятой (float)**:
   Числа с плавающей запятой также являются неизменяемыми. При изменении значения переменной создается новый объект с новым значением.
   Пример:
   ```python
   f = 3.14
   f = 2.71  # создается новый объект с значением 2.71
   ```

5. **Множества замороженные (frozenset)**:
   Замороженные множества (frozenset) представляют собой неизменяемые множества. Они не поддерживают методы, изменяющие их содержимое.
   Пример:
   ```python
   fs = frozenset([1, 2, 3])
   # fs.add(4) вызовет ошибку
   ```

Особенности неизменяемых типов:
- Они являются более безопасными в многозадачных программах, так как не могут быть изменены в другом потоке, что исключает возможность гонки за данными.
- Неизменяемые объекты могут быть использованы в качестве ключей в словарях, поскольку их состояние не изменится.

Таким образом, неизменяемые типы данных помогают улучшить производительность и безопасность программы, предотвращая неожиданные изменения данных.
